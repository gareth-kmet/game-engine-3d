package game.world;

import java.util.Random;

import org.lwjgl.input.Keyboard;
import org.lwjgl.util.vector.Vector3f;

import entities.Entity;
import entities.Light;
import game.GameLoopManager;
import game.world.terrain.TerrainGenerator;
import game.world.terrain.TerrainVariables;
import game.world.terrain.TerrainVariables.Water;
import mainLoop.MainLoopVariables;
import rendering.loaders.Loader;
import rendering.loaders.ObjLoader;
import rendering.models.TexturedModel;
import rendering.models.textures.ModelTexture;
import rendering.models.textures.TerrainTexture;
import rendering.models.textures.TerrainTexturePack;
import rendering.water.WaterTile;

public final class WorldManager implements GameLoopManager{
	
	private TerrainGenerator terrainGenerator;

	@Override
	public void create() {
		Loader loader = MainLoopVariables.getLoader();
		
		terrainGenerator = new TerrainGenerator();
		terrainGenerator.generate();
		
		Light sun = new Light(new Vector3f(10000000,1500000000,-1000000), new Vector3f(1.3f,1.3f,1.3f));
		MainLoopVariables.setSun(sun);
		
		

		for (int i=0; i<10*TerrainVariables.TERRAIN_COUNT; i++) {
			for(int j = 0; j<10*TerrainVariables.TERRAIN_COUNT; j++) {
				WaterTile water = new WaterTile(50+100*i, 50+100*j, Water.HEIGHT);
				MainLoopVariables.getWaters().add(water);
			}	
		}
		
	}
	
	
	boolean octavesBool = false;
	
	@Override
	public void update() {
		
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD5)) {
			TerrainVariables.Heights.persistance=0.25f;
			TerrainVariables.Heights.lacunarity=2.0f;
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD2)) {
			TerrainVariables.Heights.persistance /= 2;
			System.out.println("Persistance: "+TerrainVariables.Heights.persistance);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD8)) {
			TerrainVariables.Heights.persistance *= 2;
			System.out.println("Persistance: "+TerrainVariables.Heights.persistance);
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD6)) {
			TerrainVariables.Heights.lacunarity *= 2;
			System.out.println("Lacunarity: "+TerrainVariables.Heights.lacunarity);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD4)) {
			TerrainVariables.Heights.lacunarity /= 2;
			System.out.println("Lacunarity: "+TerrainVariables.Heights.lacunarity);
			terrainGenerator.regenerate();
			return;
		}
		
		
		if(Keyboard.isKeyDown(Keyboard.KEY_2)) {
			TerrainVariables.Heights.scale /= 2;
			System.out.println("Scale: "+TerrainVariables.Heights.scale);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_8)) {
			TerrainVariables.Heights.scale *= 2;
			System.out.println("Scale: "+TerrainVariables.Heights.scale);
			terrainGenerator.regenerate();
			return;
		}
		if(Keyboard.isKeyDown(Keyboard.KEY_4)) {
			TerrainVariables.Heights.octaves-=1;
			System.out.println("Octaves: "+TerrainVariables.Heights.octaves);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_6)) {
			TerrainVariables.Heights.octaves+=2;
			System.out.println("Octaves: "+TerrainVariables.Heights.octaves);
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_3)) {
			if(TerrainVariables.Heights.resolution-1<1)return;
			TerrainVariables.Heights.resolution-=1;
			if(TerrainVariables.Heights.resolution>6 && TerrainVariables.Heights.resolution%2==1) {
				TerrainVariables.Heights.resolution-=1;
			}
			System.out.println("Resolution: "+TerrainVariables.Heights.resolution);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_7)) {
			if(TerrainVariables.Heights.resolution+1>12)return;
			TerrainVariables.Heights.resolution+=1;
			if(TerrainVariables.Heights.resolution>6 && TerrainVariables.Heights.resolution%2==1) {
				TerrainVariables.Heights.resolution+=1;
			}
			System.out.println("Resolution: "+TerrainVariables.Heights.resolution);
			terrainGenerator.regenerate();
			return;
		}
	}

	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		
	}
	

}
