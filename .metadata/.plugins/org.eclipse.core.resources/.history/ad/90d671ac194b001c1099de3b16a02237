package entities;

import org.lwjgl.input.Keyboard;
import org.lwjgl.util.vector.Vector3f;

import game.world.WorldVariables;
import game.world.gameObjects.GameObject;
import game.world.terrain.TerrainGenerator.TerrainHeightFinder;
import game.world.terrain.TerrainVariables;
import mainLoop.DisplayManager;
import objects.TexturedModels;
import physics.collisions.PhysicsCollide;
import physics.collisions.PhysicsMovement;

public class Player extends GameObject{
	
	private static final float RUN_SPEED = 20, TURN_SPEED = 160, JUMP_POWER = 30;
	public static final float GRAVITY = -50;
	
	private float currentSpeed=0;
	private float currentTurnSpeed = 0;
	private float upwardsSpeed = 0;
	private boolean isInAir = false;
	
	public Entity playerEntity;
	

	public Player(WorldVariables vars, TexturedModels model, Vector3f position, Vector3f rotation, float scale) {
		super(vars, position, rotation, scale);
		playerEntity = new Entity(model, position, rotation.x, rotation.y, rotation.z, scale);
		objectEntities.add(playerEntity);
	}
	
	public void move(WorldVariables vars) {
		checkInputs();
		setRotation(new Vector3f(rotation.x, rotation.y+currentTurnSpeed*DisplayManager.getFrameTimeSeconds(), rotation.z));
		float distance = currentSpeed*DisplayManager.getFrameTimeSeconds();
		float dx = (float) (distance * Math.sin(Math.toRadians(rotation.y)));
		float dz = (float) (distance * Math.cos(Math.toRadians(rotation.y)));
		upwardsSpeed+= GRAVITY * DisplayManager.getFrameTimeSeconds();
		Vector3f newPos = new Vector3f(dx, upwardsSpeed * DisplayManager.getFrameTimeSeconds(), dz);
		Vector3f.add(position, newPos, newPos);
		PhysicsMovement movement = new PhysicsMovement(this, newPos);
		setPosition(newPos);
		float terrainHeight = vars.terrainVariables.heights!=null?vars.terrainVariables.heights.getHeight(getPosition()):getPosition().y;
		if(super.getPosition().y<terrainHeight) {
			upwardsSpeed = 0;
			isInAir=false;
			super.getPosition().y=terrainHeight;
		}
	}
	
	private void jump() {
		if(!isInAir) {
			this.upwardsSpeed=JUMP_POWER;
			isInAir=true;
		}
		
	}
	
	private void checkInputs() {
		if(Keyboard.isKeyDown(Keyboard.KEY_W)) {
			currentSpeed=RUN_SPEED;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_S)) {
			currentSpeed=-RUN_SPEED;
		}else {
			currentSpeed=0;
		}
		if(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
			currentSpeed*=50;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_D)) {
			currentTurnSpeed=-TURN_SPEED;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_A)) {
			currentTurnSpeed=TURN_SPEED;
		}else {
			currentTurnSpeed=0;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
			jump();
		}
	}
	

}
