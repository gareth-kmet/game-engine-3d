package game.world;

import java.util.Random;

import org.lwjgl.input.Keyboard;
import org.lwjgl.util.vector.Vector3f;

import entities.Entity;
import entities.Light;
import game.GameLoopManager;
import game.world.terrain.TerrainGenerator;
import game.world.terrain.TerrainVariables;
import mainLoop.MainLoopVariables;
import rendering.loaders.Loader;
import rendering.loaders.ObjLoader;
import rendering.models.TexturedModel;
import rendering.models.textures.ModelTexture;
import rendering.models.textures.TerrainTexture;
import rendering.models.textures.TerrainTexturePack;
import rendering.water.WaterRenderer;
import rendering.water.WaterTile;

public final class WorldManager implements GameLoopManager{
	
	private TerrainGenerator terrainGenerator;

	@Override
	public void create() {
		Loader loader = MainLoopVariables.getLoader();
		
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadGameTexture("res/grassy"));
		TerrainTexture rTexture = new TerrainTexture(loader.loadGameTexture("res/dirt"));
		TerrainTexture gTexture = new TerrainTexture(loader.loadGameTexture("res/pinkFlowers"));
		TerrainTexture bTexture = new TerrainTexture(loader.loadGameTexture("res/path"));
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture,rTexture,gTexture,bTexture);
		TerrainTexture blendMap = new TerrainTexture(loader.loadGameTexture("blankext"));
/*
		TexturedModel treeModel = new TexturedModel(ObjLoader.loadOBJ("res/pine", loader), new ModelTexture(loader.loadGameTexture("res/pine")));
		TexturedModel grassModel = new TexturedModel(ObjLoader.loadOBJ("res/grassModel", loader), new ModelTexture(loader.loadGameTexture("res/grassTexture")));
		grassModel.getTexture().setHasTransparency(true);
		grassModel.getTexture().setUseFakeLighting(true);
		TexturedModel fernModel = new TexturedModel(ObjLoader.loadOBJ("res/fern", loader), new ModelTexture(loader.loadGameTexture("res/fern"),2));
		fernModel.getTexture().setHasTransparency(true);
		
		
		TexturedModel cherryModel = new TexturedModel(ObjLoader.loadOBJ("res/normal/cherry", loader), new ModelTexture(loader.loadGameTexture("res/normal/cherry")));
		cherryModel.getTexture().setHasTransparency(true);
		cherryModel.getTexture().setShineDamper(10);
		cherryModel.getTexture().setReflectivity(0.5f);
		cherryModel.getTexture().setSpecularMap(loader.loadGameTexture("res/normal/cherryS"));
		Entity cherry = new Entity(cherryModel, new Vector3f(400,19.4f,-393.5f), 0, 0, 0, 1f);
		MainLoopVariables.addEntity(cherry);
		
		TexturedModel lanternModel = new TexturedModel(ObjLoader.loadOBJ("res/normal/lantern", loader), new ModelTexture(loader.loadGameTexture("res/normal/lantern")));
		lanternModel.getTexture().setShineDamper(10);
		lanternModel.getTexture().setReflectivity(0.5f);
		lanternModel.getTexture().setSpecularMap(loader.loadGameTexture("res/normal/lanternS"));
		Entity lantern = new Entity(lanternModel, new Vector3f(400,19.4f,-393.5f), 0, 0, 0, 1f);
		MainLoopVariables.addEntity(lantern);
		*/
		/*
		for(int i=0; i<1500; i++) {
			float x = random.nextFloat() * 800 ;
			float z = random.nextFloat() * -600;
			float y = terrain.getHeightOfTerrain(x, z);
			if(y<=0) {
				continue;
			}
			if(i%6==0) {
				MainLoopVariables.addEntity(new Entity(treeModel, new Vector3f(x,y,z),0,0,0,0.5f));
			}else if(i%3==1) {
				//entities.add(new Entity(grassModel, new Vector3f(x,y,z),0,0,0,1));
			}else {
				MainLoopVariables.addEntity(new Entity(fernModel, random.nextInt(4), new Vector3f(x,y,z),0,0,0,0.6f));
			}
			
			
		}*/
		terrainGenerator = new TerrainGenerator();
		terrainGenerator.generate();
		
		Light sun = new Light(new Vector3f(10000000,1500000000,-1000000), new Vector3f(1.3f,1.3f,1.3f));
		MainLoopVariables.setSun(sun);
		
		

		for (int i=0; i<10; i++) {
			for(int j = 0; j<10; j++) {
				WaterTile water = new WaterTile(50+100*i, 50+100*j, WaterRenderer.WATER_HEIGHT);
				//MainLoopVariables.getWaters().add(water);
			}	
		}
		
	}
	
	
	boolean octavesBool = false;
	
	@Override
	public void update() {
		
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD5)) {
			TerrainVariables.Heights.persistance=0.25f;
			TerrainVariables.Heights.lacunarity=2.0f;
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD2)) {
			TerrainVariables.Heights.persistance /= 2;
			System.out.println("Persistance: "+TerrainVariables.Heights.persistance);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD8)) {
			TerrainVariables.Heights.persistance *= 2;
			System.out.println("Persistance: "+TerrainVariables.Heights.persistance);
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD6)) {
			TerrainVariables.Heights.lacunarity *= 2;
			System.out.println("Lacunarity: "+TerrainVariables.Heights.lacunarity);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_NUMPAD4)) {
			TerrainVariables.Heights.lacunarity /= 2;
			System.out.println("Lacunarity: "+TerrainVariables.Heights.lacunarity);
			terrainGenerator.regenerate();
			return;
		}
		
		
		if(Keyboard.isKeyDown(Keyboard.KEY_2)) {
			TerrainVariables.Heights.scale /= 2;
			System.out.println("Scale: "+TerrainVariables.Heights.scale);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_8)) {
			TerrainVariables.Heights.scale *= 2;
			System.out.println("Scale: "+TerrainVariables.Heights.scale);
			terrainGenerator.regenerate();
			return;
		}
		if(Keyboard.isKeyDown(Keyboard.KEY_4)) {
			TerrainVariables.Heights.octaves-=1;
			System.out.println("Octaves: "+TerrainVariables.Heights.octaves);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_6)) {
			TerrainVariables.Heights.octaves+=2;
			System.out.println("Octaves: "+TerrainVariables.Heights.octaves);
			terrainGenerator.regenerate();
			return;
		}
		
		if(Keyboard.isKeyDown(Keyboard.KEY_4)) {
			if(TerrainVariables.Heights.resolution-1<1)return;
			TerrainVariables.Heights.resolution-=1;
			System.out.println("Resolution: "+TerrainVariables.Heights.resolution);
			terrainGenerator.regenerate();
			return;
		}else if(Keyboard.isKeyDown(Keyboard.KEY_6)) {
			if(TerrainVariables.Heights.resolution+1>6)return;
			TerrainVariables.Heights.resolution+=1;
			System.out.println("Resolution: "+TerrainVariables.Heights.resolution);
			terrainGenerator.regenerate();
			return;
		}
	}
	

}
