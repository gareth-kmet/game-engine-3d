#version 400 core

in float pass_textureColour;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;
in float height;


layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D shadowMap;

uniform vec3 lightColour[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform vec3 attenuation[4];
uniform sampler2D textures[10];

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void){

	float mapSize = 4096.0;
	float texelSize = 1.0/mapSize;
	float total = 0.0;
	for(int x=-pcfCount; x<=pcfCount; x++){
		for(int y=-pcfCount; y<=pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y)*texelSize).r;
			if(shadowCoords.z > objectNearestLight){
				total+=1.0;
			}
		}
	}
	
	total /= totalTexels;

	float lightFactor = 1.0 - (total*shadowCoords.w);

	//vec4 totalColour = vec4(pass_textureColour, 1.0);
	
	vec2 tiledCoords = pass_textureCoords;
	vec4 sampledColour = texture(textures[int(floor(pass_textureColour))], tiledCoords);
	vec4 totalColour = sampledColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i =0; i<4; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x +(attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
	}
	
	totalDiffuse = max(totalDiffuse * lightFactor, 0.4); //change second peramater to set ambient lighting
	
	out_Color = vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColour,1.0),out_Color,visibility);
	out_BrightColor = vec4(0.0);

}