package game.world.terrain.heights;

import java.util.Random;

import org.lwjgl.util.vector.Vector2f;

abstract class Noise {
	
	private final static Noisy NOISE_GENERATOR = new Noisy(0);
	private final static Random RANDOM = new Random();
	
	public static Data generateNoiseMap(int mapWidth, int mapHeight, float scale, int seed, int octaves, float persistance, float lacunarity, Vector2f offset){
		float[][] noiseMap = new float[mapWidth][mapHeight];
		
		NOISE_GENERATOR.seed = seed;
		RANDOM.setSeed(seed);
		
		Vector2f[] octaveOffsets = new Vector2f[octaves];
		for(int i = 0; i<octaves; i++) {
			float offsetX = RANDOM.nextInt(20000)-10000;
			float offsetY = RANDOM.nextInt(20000)-10000;
			octaveOffsets[i] = new Vector2f(offsetX, offsetY);
		}
		
		if(scale <= 0) {
			scale = 0.0001f;
		}
		
		float maxNoiseHeight = Float.MAX_VALUE;
		float minNoiseHeight = Float.MIN_VALUE;
		
		for(int y = 0; y<mapHeight; y++) {
			
			for(int x = 0; x<mapWidth; x++) {
				float amplitude = 1;
				float frequency = 1;
				float noiseHeight = 0;
				
				for(int i=0; i<octaves; i++) {
					float sampleX = (x+offset.x)/scale * frequency +octaveOffsets[i].x;
					float sampleY = (y+offset.y)/scale * frequency +octaveOffsets[i].y;
					
					float perlinValue = NOISE_GENERATOR.perlinNoise2D(sampleX, sampleY);
					noiseHeight += perlinValue * amplitude;
					
					amplitude *= persistance;
					frequency *= lacunarity;
				}
				
				if(noiseHeight > maxNoiseHeight) {
					maxNoiseHeight = noiseHeight;
				}else if(noiseHeight < minNoiseHeight) {
					minNoiseHeight = noiseHeight;
				}
				
				noiseMap[x][y]=noiseHeight;
				
			}
		}
		
		
		return new Data(noiseMap, maxNoiseHeight, minNoiseHeight);
	}
	
	public final static class Data{
		
		final float[][] map;
		final float max, min;
		
		
		private Data(float[][] noiseMap, float maxNoiseHeight, float minNoiseHeight) {
			this.map=noiseMap;
			max=maxNoiseHeight;
			min=minNoiseHeight;
		}
		
	}

}
