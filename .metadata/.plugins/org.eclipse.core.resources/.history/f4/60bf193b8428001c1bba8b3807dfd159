package game.world.terrain;

import org.lwjgl.util.vector.Vector3f;

public abstract class Normals {
	
	
	public static void generateNormals(Terrain t, TerrainModelData data, TerrainGenerator terrains) {
		
		int triangleCount = data.indices.length / 3;
		
		for(int i = 0; i<triangleCount; i++) {
			
			int triangleIndex = i*3;
			int vertexIndexA = data.indices[triangleIndex];
			int vertexIndexB = data.indices[triangleIndex+1];
			int vertexIndexC = data.indices[triangleIndex+2];
			
			
		}
	}
	
	public static Vector3f surfaceNormalFromIndices(int indexVA, int indexVB, int indexVC, float[] vertices) {
		
		Vector3f pointA = getNormal(indexVA, vertices);
		Vector3f pointB = getNormal(indexBA, vertices);
		Vector3f pointC = getNormal(indexCA, vertices);
		
		Vector3f sideAB = Vector3f.sub(pointB, pointA, new Vector3f());
		Vector3f sideAC = Vector3f.sub(pointC, pointA, new Vector3f());
		
		Vector3f cross = Vector3f.cross(sideAB, sideAC, new Vector3f());
		
		return cross;
		
	}
	
	public static Vector3f getNormal(int vertexIndex, float[] normals) {
		int index = vertexIndex * 3;
		Vector3f normal = new Vector3f(normals[index], normals[index+1], normals[index+2]);
		return normal;
	}
	

}
